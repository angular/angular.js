{"version":3,"sources":["js/angular-bootstrap/dropdown-toggle.js"],"names":[],"mappings":"AA0BA,QAAA,OAAA,4BAEA,SAAA,kBACA,UAAA,SAGA,QAAA,mBAAA,YAAA,SAAA,GACA,GAAA,GAAA,IAEA,MAAA,KAAA,SAAA,GACA,IACA,EAAA,GAAA,QAAA,GACA,EAAA,GAAA,UAAA,IAGA,GAAA,IAAA,IACA,EAAA,QAAA,GAGA,EAAA,GAGA,KAAA,MAAA,SAAA,GACA,IAAA,IACA,EAAA,KACA,EAAA,IAAA,QAAA,GACA,EAAA,IAAA,UAAA,IAIA,IAAA,GAAA,WACA,EAAA,OAAA,WACA,EAAA,QAAA,KAIA,EAAA,SAAA,GACA,KAAA,EAAA,OACA,QAKA,WAAA,sBAAA,SAAA,SAAA,iBAAA,kBAAA,WAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,EAAA,EAAA,SAEA,MAAA,KAAA,SAAA,GACA,EAAA,SAAA,EACA,EAAA,OAAA,QAAA,UAAA,EAAA,QAAA,EAAA,QAAA,MAAA,EAAA,SAAA,GAGA,KAAA,OAAA,SAAA,GACA,MAAA,GAAA,OAAA,UAAA,SAAA,GAAA,EAAA,QAIA,KAAA,OAAA,WACA,MAAA,GAAA,QAGA,EAAA,OAAA,SAAA,SAAA,GACA,EAAA,EAAA,WAAA,eAAA,EAAA,SAAA,GAEA,EACA,EAAA,KAAA,GAEA,EAAA,MAAA,GAGA,EAAA,UAAA,OAAA,MAGA,EAAA,IAAA,yBAAA,WACA,EAAA,QAAA,OAIA,UAAA,WAAA,WACA,OACA,SAAA,KACA,WAAA,qBACA,OACA,OAAA,KACA,SAAA,KAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,OAKA,UAAA,iBAAA,WACA,OACA,SAAA,KACA,QAAA,aACA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAIA,EAAA,GAAA,QAAA,SAAA,GACA,EAAA,iBACA,EAAA,kBAEA,EAAA,SAAA,aAAA,EAAA,KAAA,aACA,EAAA,OAAA,WACA,EAAA,aAMA,EAAA,MAAA,iBAAA,EAAA,iBAAA,IACA,EAAA,OAAA,EAAA,OAAA,SAAA,GACA,EAAA,KAAA,kBAAA","file":"js/angular-bootstrap/dropdown-toggle.min.js","sourcesContent":["/* This code is taken from the AngularUI - Bootstrap Project (https://github.com/angular-ui/bootstrap)\n *\n * The MIT License\n * \n * Copyright (c) 2012-2014 the AngularUI Team, https://github.com/organizations/angular-ui/teams/291112\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nangular.module('ui.bootstrap.dropdown', [])\n\n.constant('dropdownConfig', {\n  openClass: 'open'\n})\n\n.service('dropdownService', ['$document', function($document) {\n  var self = this, openScope = null;\n\n  this.open = function( dropdownScope ) {\n    if ( !openScope ) {\n      $document.on('click', closeDropdown);\n      $document.on('keydown', escapeKeyBind);\n    }\n\n    if ( openScope && openScope !== dropdownScope ) {\n        openScope.isOpen = false;\n    }\n\n    openScope = dropdownScope;\n  };\n\n  this.close = function( dropdownScope ) {\n    if ( openScope === dropdownScope ) {\n      openScope = null;\n      $document.off('click', closeDropdown);\n      $document.off('keydown', escapeKeyBind);\n    }\n  };\n\n  var closeDropdown = function() {\n    openScope.$apply(function() {\n      openScope.isOpen = false;\n    });\n  };\n\n  var escapeKeyBind = function( evt ) {\n    if ( evt.which === 27 ) {\n      closeDropdown();\n    }\n  };\n}])\n\n.controller('DropdownController', ['$scope', '$attrs', 'dropdownConfig', 'dropdownService', '$animate', function($scope, $attrs, dropdownConfig, dropdownService, $animate) {\n  var self = this, openClass = dropdownConfig.openClass;\n\n  this.init = function( element ) {\n    self.$element = element;\n    $scope.isOpen = angular.isDefined($attrs.isOpen) ? $scope.$parent.$eval($attrs.isOpen) : false;\n  };\n\n  this.toggle = function( open ) {\n    return $scope.isOpen = arguments.length ? !!open : !$scope.isOpen;\n  };\n\n  // Allow other directives to watch status\n  this.isOpen = function() {\n    return $scope.isOpen;\n  };\n\n  $scope.$watch('isOpen', function( value ) {\n    $animate[value ? 'addClass' : 'removeClass'](self.$element, openClass);\n\n    if ( value ) {\n      dropdownService.open( $scope );\n    } else {\n      dropdownService.close( $scope );\n    }\n\n    $scope.onToggle({ open: !!value });\n  });\n\n  $scope.$on('$locationChangeSuccess', function() {\n    $scope.isOpen = false;\n  });\n}])\n\n.directive('dropdown', function() {\n  return {\n    restrict: 'CA',\n    controller: 'DropdownController',\n    scope: {\n      isOpen: '=?',\n      onToggle: '&'\n    },\n    link: function(scope, element, attrs, dropdownCtrl) {\n      dropdownCtrl.init( element );\n    }\n  };\n})\n\n.directive('dropdownToggle', function() {\n  return {\n    restrict: 'CA',\n    require: '?^dropdown',\n    link: function(scope, element, attrs, dropdownCtrl) {\n      if ( !dropdownCtrl ) {\n        return;\n      }\n\n      element.on('click', function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if ( !element.hasClass('disabled') && !element.prop('disabled') ) {\n          scope.$apply(function() {\n            dropdownCtrl.toggle();\n          });\n        }\n      });\n\n      // WAI-ARIA\n      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });\n      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {\n        element.attr('aria-expanded', !!isOpen);\n      });\n    }\n  };\n});"],"sourceRoot":"/source/"}