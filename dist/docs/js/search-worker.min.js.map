{"version":3,"sources":["js/search-worker.js"],"names":[],"mappings":"AAAA,YAKA,eAAA,0CAIA,IAAA,OAAA,KAAA,WACA,KAAA,IAAA,QACA,KAAA,MAAA,cAAA,MAAA,KACA,KAAA,MAAA,WAAA,MAAA,KACA,KAAA,MAAA,YAAA,MAAA,OAIA,cACA,kBAAA,GAAA,eACA,mBAAA,OAAA,WAGA,WAAA,KAAA,MAAA,KAAA,cAEA,WAAA,QAAA,SAAA,GACA,MAAA,IAAA,KAEA,aAAA,EAAA,iBAEA,kBAAA,KAAA,MAAA,oBACA,kBAAA,OAGA,UAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAAA,EACA,EAAA,MAAA,OAAA,GACA,IAEA,GAAA,QAAA,SAAA,GACA,EAAA,KAAA,EAAA,OAGA,aAAA,EAAA,cAAA,EAAA,EAAA,EAAA","file":"js/search-worker.min.js","sourcesContent":["\"use strict\";\n/* jshint browser: true */\n/* global importScripts, onmessage: true, postMessage, lunr */\n\n// Load up the lunr library\nimportScripts('../components/lunr.js-0.4.2/lunr.min.js');\n\n// Create the lunr index - the docs should be an array of object, each object containing\n// the path and search terms for a page\nvar index = lunr(function() {\n  this.ref('path');\n  this.field('titleWords', {boost: 50});\n  this.field('members', { boost: 40});\n  this.field('keywords', { boost : 20 });\n});\n\n// Retrieve the searchData which contains the information about each page to be indexed\nvar searchData = {};\nvar searchDataRequest = new XMLHttpRequest();\nsearchDataRequest.onload = function() {\n\n  // Store the pages data to be used in mapping query results back to pages\n  searchData = JSON.parse(this.responseText);\n  // Add search terms from each page to the search index\n  searchData.forEach(function(page) {\n    index.add(page);\n  });\n  postMessage({ e: 'index-ready' });\n};\nsearchDataRequest.open('GET', 'search-data.json');\nsearchDataRequest.send();\n\n// The worker receives a message everytime the web app wants to query the index\nonmessage = function(oEvent) {\n  var q = oEvent.data.q;\n  var hits = index.search(q);\n  var results = [];\n  // Only return the array of paths to pages\n  hits.forEach(function(hit) {\n    results.push(hit.ref);\n  });\n  // The results of the query are sent back to the web app via a new message\n  postMessage({ e: 'query-ready', q: q, d: results });\n};"],"sourceRoot":"/source/"}