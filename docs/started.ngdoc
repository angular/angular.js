@workInProgress
@ngdoc overview
@name Getting Started
@description

# Prerequisite

Before you get started, you must have the `angular` source set up on your machine.  
If you haven't done this yet, see {@link guide.downloading Downloading}.

# Hello World!

The best way for you to get started with `angular` is to create the tradtional "Hello World!" app:

1. In your favorite text editor, create an HTML file (such as, `helloworld.html`). 
2. From the *Source* box below, copy and paste the code into your HTML file.
   (Double-click on the source to easily select all.)
3. Open the file in your web browser.

<doc:example>
    <doc:source>
        Hello {{'World'}}!
    </doc:source>
</doc:example>

The resulting web page should look something like the following:
<hr>
<img class="center" src="img/helloworld.png"/>
<hr>

It's just that simple.  But now let's take a closer look at that code, and see what is going on behind the scenes:

<pre>
<html xmlns:ng="http://angularjs.org">
</pre>

This line defines the namespace `ng`, which represents the URL `http://angularjs.org`. You must define the
`ng` namespace in your application so that the browser understands `angular` directives like
`ng:autobind`.

<pre>
<script type="text/javascript" src="http://code.angularjs.org/angular-?.?.?.min.js" ng:autobind></script>
</pre>

This line sets the `src` attribute of the script tag to `http://code.angularjs.org/angular-?.?.?.min.js`. This
bootstraps the `angular` environment, and uses the `ng:autobind` attribute to compile and manage the
whole HTML document. The compilation takes place in the page's `onLoad` handler.

<pre>
Hello {{'World'}}!
</pre>

This is the template that describes how this element is displayed in the UI.
It uses the double curly brace markup (`{{}}`) to *bind an expression* to the greeting text. In this
case, the expression is the simple string literal 'World'.

# Hello <angular/> World

Here is a more advanced "Hello World!" example, that demonstrates `angular`'s two-way data binding. Edit
your HTML file from the "Hello World!" example above, and replace the contents of `<body/>` with this:

<doc:example>
 <doc:source>
  Your name: <input type="text" name="yourname" value="World"/>
  <hr/>
  Hello {{yourname}}!
 </doc:source>
</doc:example>

These are the changes to note:

* The text input widget is bound to the text stored by the name variable (`yourname`).
* The name variable is implicit in the root scope.
* You did not need to explicitly register an event listener or define an event handler for events!

Refresh the page in your browser. Your screen should now look something like this:

<img class="left" src="img/helloworld_2way.png"/>

Now try typing your name into the input box, and notice the immediate change to the displayed greeting. This
demonstrates the concept of `angular`'s two-way data binding; any changes to the input field
are immediately reflected in the greeting text.

# Anatomy of an `angular` App

This section describes the 3 parts of an `angular` app, and explains how they map to the Model-View-Controller design pattern:

## Template

Templates, which you write in HTML and CSS, are the View. You add elements, attributes, and markup
to HTML, which serve as instructions to the `angular` compiler. These instructions are fully extensible,
meaning that *you can build your own declarative language with `angular`*!

## Application Logic and Behavior

Application Logic and Behavior, which you define in JavaScript, are the Controller. Unlike
standard AJAX applications, you don't need to write additional listeners or DOM manipulators in
`angular` because they are built-in. This makes your application logic very easy to write, test,
maintain, and understand.

## Scope

Scope is the model.  It is a JavaScript object that has the ability to watch for and get notified of
changes. You typically don't need to write much, if any, additional JavaScript to define your model.

Additionally, `angular` comes with a set of Services, which have the following properties:

* Useful for building web applications.
* You can extend and add application-specific behavior to services.
* Examples include Dependency-Injection, XHR, caching, URL routing, and browser abstraction.

The following illustration shows the parts of an `angular` application and how they work together:

<img class="left" src="img/angular_parts.png"/>

# Where to go next

* For additional hands-on examples of using `angular`, including more source code that you can copy and
paste into your own pages, take a look through the `angular` {@link Cookbook}.

* For explanations of the `angular` concepts presented in the examples on this page, see the 
  {@link guide Developer Guide}, which includes the following topics : 
    * {@link guide.bootstrap Bootstrap}
    * {@link guide.compiler HTML Compiler}
    * {@link guide.template Template}
    * {@link angular.widget.HTML Input}
    * {@link angula.scope Scope}
    * {@link guide.data-binding Data Binding}
    * {@link angular.markup Markup}
