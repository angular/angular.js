@ngdoc overview
@name Contribute
@description

# How to Contribute to AngularJS

This document describes how to set up your development environment to contribute to AngularJS, and
explains the basic mechanics of using `git`, Github, `node`, `npm`,
`grunt`, and `bower`.

See the [contributing guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md) for best practices
and hints on how to help us get your change into AngularJS faster.


1. <a href="#developing-angularjs_installing-dependencies">Installing Dependencies</a>
2. <a href="#developing-angularjs_forking-angular-on-github">Forking Angular on Github</a>
3. <a href="#developing-angularjs_building-angularjs">Building AngularJS</a>
4. <a href="#developing-angularjs_running-a-local-development-web-server">Running a Local Development Web Server</a>
5. <a href="#developing-angularjs_running-the-unit-test-suite">Running the Unit Test Suite</a>
6. <a href="#developing-angularjs_running-the-end-to-end-test-suite">Running the End-to-end Test Suite</a>
7. <a href="#developing-angularjs_submitting-your-changes">Submitting Your Changes</a>

For guidelines on filing issues, see the [Issues section of the contributing guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#found-an-issue).

## Installing Dependencies

Before you can build AngularJS, you must install and configure the following dependencies on your
machine:

* {@link http://git-scm.com/ Git}: The {@link http://help.github.com/mac-git-installation Github Guide to
Installing Git} is a good source of information.

* {@link http://nodejs.org Node.js}: We use Node to generate the documentation, run a
development web server, run tests, and generate build files. Depending on your system, you can install Node either from source or as a
pre-packaged bundle.

* {@link http://www.java.com Java}: We minify JavaScript using our
{@link https://developers.google.com/closure/ Closure Tools} jar. Make sure you have Java (version 6 or higher) installed
and included in your {@link http://docs.oracle.com/javase/tutorial/essential/environment/paths.html PATH} variable.

* {@link http://gruntjs.com Grunt}: We use Grunt as our build system. Install the grunt command-line tool globally with:

  ```shell
  npm install -g grunt-cli
  ```

* {@link http://bower.io/ Bower}: We use Bower to manage client-side packages for the docs. Install the `bower` command-line tool globally with:

  ```shell
  npm install -g bower
  ```


Once installed, you'll also need several Node packages, which you can install once you checked out a local copy
of the Angular repository (see below) with:

```shell
cd angular.js
npm install
bower install
```

## Forking Angular on Github

To create a Github account, follow the instructions {@link https://github.com/signup/free here}.
Afterwards, go ahead and {@link http://help.github.com/forking fork} the {@link
https://github.com/angular/angular.js main AngularJS repository}.


## Building AngularJS

To build AngularJS, you check out the source code and use Grunt to generate the non-minified and
minified AngularJS files:

```shell
# Clone your Github repository:
git clone git@github.com:<github username>/angular.js.git

# Go to the AngularJS directory:
cd angular.js

# Add the main AngularJS repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.js.git

# Install node.js dependencies:
npm install

# Install bower components:
bower install

# Build AngularJS:
grunt package
```


<div class="alert alert-warning">
**Note:** If you're using Windows you must run your command line with administrative privileges (right click, run as
Administrator).
</div>

The build output can be located under the `build` directory. It consists of the following files and
directories:

* `angular-<version>.zip` — The complete zip file, containing all of the release build
artifacts.

* `angular.js` — The non-minified `angular` script.

* `angular.min.js` —  The minified `angular` script.

* `angular-scenario.js` — The `angular` End2End test runner.

* `docs/` — A directory that contains all of the files needed to run `docs.angularjs.org`.

* `docs/index.html` — The main page for the documentation.

* `docs/docs-scenario.html` — The End2End test runner for the documentation application.


## Running a Local Development Web Server

To debug code and run end-to-end tests, it is often useful to have a local HTTP server. For this purpose, we have
made available a local web server based on Node.js.

1. To start the web server, run:
   ```shell
   grunt webserver
   ```

2. To access the local server, enter the following URL into your web browser:
   ```
   http://localhost:8000/
   ```
   By default, it serves the contents of the AngularJS project directory.


## Running the Unit Test Suite

We write unit and integration tests with Jasmine and execute them with Karma. To run all of the
tests once on Chrome run:

```shell
grunt test:unit
```

To run the tests on other browsers (Chrome, ChromeCanary, Firefox, Opera and Safari are pre-configured) use:

```shell
grunt test:unit --browsers Opera,Firefox
```

Note there should be _no spaces between browsers_. `Opera, Firefox` is INVALID.

During development it's however more productive to continuously run unit tests every time the source or test files
change. To execute tests in this mode run:

1. To start the Karma server, capture Chrome browser and run unit tests, run:

   ```shell
   grunt autotest:jqlite
   ```

2. To capture more browsers, open this URL in the desired browser (URL might be different if you have multiple instance
   of Karma running, read Karma's console output for the correct URL):

   ```shell
   http://localhost:9876/
   ```

3. To re-run tests just change any source or test file.


To learn more about all of the preconfigured Grunt tasks run:

```shell
grunt --help
```

## Running the End-to-end Test Suite

Simply run:

```shell
grunt test:e2e
```

This will start the webserver and run the tests.



## Submitting Your Changes

To create and submit a change:

1. Please sign our Contributor License Agreement (CLA) before sending pull requests.
   We need this to be signed before we can accept your changes. It's a quick process, we promise!

   For individuals we have a [simple click-through form](http://code.google.com/legal/individual-cla-v1.0.html). For
   corporations we'll need you to
   [print, sign and scan+email, fax, or mail the form](http://code.google.com/legal/corporate-cla-v1.0.html).

2. Create and checkout a new branch off the master branch for your changes:

   ```shell
   git checkout -b my-fix-branch master
   ```

3. Create your patch, including appropriate test cases.

4. Commit your changes and create a descriptive commit message (the commit message is used to generate release notes,
   please check out our
   [commit message conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#)
   and our commit message presubmit hook `validate-commit-msg.js`):

   ```shell
   git commit -a
   ```

5. Push your branch to Github:

   ```shell
   git push origin my-fix-branch
   ```

6. In Github, send a pull request to `angular:master`.

That's it! Thank you for your contribution!

Please also take a look at the
[contributing guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md) for best practices
and hints on how to help us get your change into AngularJS faster.

When the patch is reviewed and merged, you can safely delete your branch and pull the changes
from the main (upstream) repository:

```shell
# Delete the remote branch on Github:
git push origin :my-fix-branch

# Check out the master branch:
git checkout master

# Delete the local branch:
git branch -D my-fix-branch

# Update your master with the latest upstream version:
git pull --ff upstream master
```
