@ngdoc overview
@name Developer Guide: Bootstrap
@description

# Overview

На этой странице показан процесс инициализации Angular и то, как провести инициализацию вручную, если возникнет такая необходимость.


# Тег `<script>` в Angular

Этот пример показывает рекомендованный способ интеграции Angular, используя, то что мы называем, автоматической инициализацией.


<pre>
<!doctype html>
<html xmlns:ng="http://angularjs.org" ng-app>
  <body>
    ...
    <script src="angular.js">
  </body>
</html>
</pre>

  * Размещайте тэг `<script>` в конце страницы. Располагая его подобным образом вы уменьшаете время загрузки вашего приложения, потому что загрузка HTML не будет заблокирована загрузкой  angular.js. Последнюю версию можно найти на http://code.angularjs.org. Пожалуйста, не используйте эту ссылку в вашем боевом коде, т.к. это создаст брешь в безопасности сайта. Для экспериментов использование этой ссылки вполне подходит.
    * `angular-[version].js` содержит удобный для восприятия код и подходит для разработки и отладки.
    * `angular-[version].min.js` содержит минифицированный и обсуфицированный код, и подходит для применения в продакшене.
  * Поместите `ng-app` в корень вашего приложения, обычно это тэг `<html>`, если хотите чтобы angular загрузил приложение автоматически.

        <html ng-app>

  * Если нужна поддержка IE7, то необходимо добавить `id="ng-app"`

        <html ng-app id="ng-app">

  * Если хотите использовать старый синтаксис директив ng: необходимо включить xml-пространство имен чтобы IE не выдал ошибку. (Эта возможность оставлена по историческим причинам и мы не рекомендуем её использовать.)

        <html xmlns:ng="http://angularjs.org">



# Автоматическая инициализация

Angular автоматически инициализируется во время события `DOMContentLoaded`,
в это время Angular ищет {@link api/ng.directive:ngApp `ng-app`} директиву, обозначающую корень вашего приложения.
Если {@link api/ng.directive:ngApp `ng-app`} найдена то Angular выполнит следующие действия:

  * load the {@link guide/module module} associated with the directive.
  * create the application {@link api/AUTO.$injector injector}
  * compile the DOM treating the {@link api/ng.directive:ngApp
    `ng-app`} directive as the root of the compilation. This allows you to tell it to treat only a
    portion of the DOM as an Angular application.


<pre>
<!doctype html>
<html ng-app="optionalModuleName">
  <body>
    I can add: {{ 1+2 }}.
    <script src="angular.js"></script>
  </body>
</html>
</pre>



# Manual Initialization


If you need to have more control over the initialization process, you can use a manual
bootstrapping method instead. Examples of when you'd need to do this include using script loaders
or the need to perform an operation before Angular compiles a page.


Here is an example of manually initializing Angular. The example is equivalent to using the {@link
api/ng.directive:ngApp ng-app} directive.

<pre>
<!doctype html>
<html xmlns:ng="http://angularjs.org">
  <body>
    Hello {{'World'}}!
    <script src="http://code.angularjs.org/angular.js"></script>
    <script>
       angular.element(document).ready(function() {
         angular.bootstrap(document);
       });
    </script>
  </body>
</html>
</pre>

This is the sequence that your code should follow:

  1. After the page and all of the code is loaded, find the root of the HTML template, which is
  typically the root of the document.

  2. Call {@link api/angular.bootstrap} to {@link compiler compile} the template into an
  executable, bi-directionally bound application.
