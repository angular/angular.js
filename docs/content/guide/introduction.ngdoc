@ngdoc overview
@name Introduction
@sortOrder 100
@description


# What Is Angular?

AngularJS is a structural framework for dynamic web apps. That is, it helps you build sophisticated 
web applications by providing an additional layer of abstraction in the web development process. It 
abstracts away many of the repetitive and time-consuming details of web application code, freeing you 
to focus on what you’re trying to build. 

Angular is better suited to the requirements of modern web design than just HTML by itself. HTML was 
intended to serve the static websites of yore, and is not well suited for the complex and dynamic needs 
of modern web applications. Often this dilemma is solved by using:

  * **a library** - a collection of functions which are useful when writing web apps. Your code is
    in charge and it calls into the library when it sees fit. E.g., `jQuery`.
  * **frameworks** - a particular implementation of a web application, where your code fills in
    the details. The framework is in charge and it calls into your code when it needs something
    app specific. E.g., `durandal`, `ember`, etc.


Angular takes another approach. It strives to bridge the gap between HTML and modern web design by
creating new HTML constructs. Angular teaches the browser new syntax through a construct we call *directives*. 
Examples include:

  * Data binding, as in `{{}}`.
  * DOM control structures for repeating, showing and hiding DOM fragments.
  * Support for forms and form validation.
  * Attaching new behavior to DOM elements, such as DOM event handling.
  * Grouping of HTML into reusable components.



## A complete client-side solution

Angular is not a single piece in the overall puzzle of building the client-side of a web
application. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a
well-defined structure. This makes Angular opinionated about how a CRUD (Create, Read, Update, Delete)
application should be built. But while it is opinionated, it also tries to make sure that its opinion 
is just a starting point you can easily change. Angular comes with the following out-of-the-box:

  * Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating
    directives, form validation, routing, deep-linking, reusable components and dependency injection.
  * Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.
  * Seed application with directory layout and test scripts as a starting point.


## Angular's sweet spot

Angular simplifies application development by presenting a higher level of abstraction to the
developer. Like any abstraction, it comes at a cost of flexibility. In other words, not every app
is a good fit for Angular. Angular was built with the CRUD application in mind. Luckily CRUD
applications represent the majority of web applications. To understand what Angular is
good at, though, it helps to understand when an app is not a good fit for Angular.

Games and GUI editors are examples of applications with intensive and tricky DOM manipulation.
These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for Angular.
In these cases it may be better to use a library with a lower level of abstraction, such as `jQuery`.

# The Zen of Angular

Angular was designed in accordance with a set of principles and best practices. 

Principles:

  * Testing is just as important as development, and as such it is good to write code that 
    is easier to test.
  * Declarative code is well suited to UI development and connecting software components. 
    Imperative code is well suited for expressing business logic.
  * Angular seeks to encompass the entire app development process, including UI design, 
    business logic, and testing.
  

Best Practices:
  * **Decouple DOM manipulation from app logic**, and avoid manipulating the DOM programmatically. 
    Angular lets you declaratively describe how the UI should change as your application state 
    changes, freeing you from low-level DOM manipulation tasks.
  * **Decouple the client side and server side of an application.** This makes it easier 
    to develop both side in parallel, and allows for reuse.
  * **Reduce and eliminate boilerplate code.** Angular frees you from having to register 
    callbacks and marshal data to and from the UI. 
  * **Reduce the amount of initialization code necessary.** Even a basic ‘hello world’ app 
    often involves a time-consuming setup process. Angular aims to reduce the overhead 
    involved in web app development, so that you can get started developing features 
    for your app quickly. 

