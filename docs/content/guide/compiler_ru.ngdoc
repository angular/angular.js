@ngdoc overview
@name Developer Guide: HTML Compiler
@description

# Обзор

[HTML компилятор]() встроенный в Angular дает возможность разработчику обучить браузер новому HTML синтаксису.Компилятор позволяет вам добавить функциональности любому HTML элементу или атрибуту или даже создать новые HTML элементы или  атрибуты с произвольными функциональными возможностями. В angular подобные расширения функциональности называются [директивами](api/ng.$compileProvider#directive).

В HTML существует множество конструкций для форматирования статичных документов в декларативном стиле. Например, если что-либо должно быть отцентрировано, не нужно подробно объяснять браузеру как поделить ширину окна пополам, чтобы найти центр, затем совместить найденную точку с центром блока текста и, наконец, вывести текст. Вместо этого к нужному элементу добавляется атрибут align="center". В этом и есть мощь декларативного языка.

Но декларативный подход ограничен, так как не позволяет «обучить» браузер новому синтаксису. Например, не существует простого способа разместить текст со смещением в одну треть ширины, а не по середине. В данном случае не помешала бы возможность введения в HTML новых синтаксических конструкций.

Angular уже содержит некоторые директивы для решения распространённых задач, которые могут пригодиться в построении любого приложения. Мы также ожидаем, что вы будете создавать новые, специфические для вашего приложения, директивы. Эти директивы послужат своеобразным предметно-ориентированным языком (DSL) для построения вашего приложения.

Вся магия происходит прямо в браузере, от вас не требуется изменять логику на сервере или производить дополнительную предкомпиляцию.


# Компилятор

Компилятор — это angular-сервис, который сканирует DOM в поисках специальных атрибутов. Процесс компиляции делится на две фазы:

  1. **Компиляция:** просмотр DOM и подготовка всех директив. Результатом этой фазы является функция линковки.

  2. **Связывание:** слияние директив и их областей видимости для получения динамического вида (???). Любые изменения модели в области видимости моментально отображаются в представлении, а любые взаимодействия пользователя с представлением обновляют модель. Таким образом, модель, хранящаяся в области видимости, становится единственным «актуальным источником» в приложении.

Некоторые директивы, такие как {@link api/ng.directive:ngRepeat
`ng-repeat`}, создают новые DOM-элементы для каждого элемента в коллекции, к которой они применены. Наличие двух фаз — компиляции и линковки — повышает эффективность, так как сам шаблон необходимо скомпилировать лишь один раз, а затем слинковать для каждой новой копии.


# Директива

Директива — это действия, которые нужно произвести если в процессе разбора/компиляции документа встретился определённый HTML-код. Директивы могут быть размещены в названиях элементов, атрибутах, именах классов и даже в комментариях. Ниже приведены примеры вызова ng-bind, имеющие одинаковый эффект:

<pre>
  <span ng-bind="exp"></span>
  <span class="ng-bind: exp;"></span>
  <ng-bind></ng-bind>
  <!-- directive: ng-bind exp -->
</pre>

Директива — это обычная функция, которая вызывается, когда компилятор встречает соответствующую конструкцию в DOM. Обратитесь к API директив за дополнительной информацией о том, как писать директивы.

Пример директивы, которая делает элемент перетаскиваемым. Обратите внимание на атрибут `draggable` у `<span>`.

<example module="drag">
  <file name="script.js">
    angular.module('drag', []).
      directive('draggable', function($document) {
        var startX=0, startY=0, x = 0, y = 0;
        return function(scope, element, attr) {
          element.css({
           position: 'relative',
           border: '1px solid red',
           backgroundColor: 'lightgrey',
           cursor: 'pointer'
          });
          element.bind('mousedown', function(event) {
            startX = event.screenX - x;
            startY = event.screenY - y;
            $document.bind('mousemove', mousemove);
            $document.bind('mouseup', mouseup);
          });

          function mousemove(event) {
            y = event.screenY - startY;
            x = event.screenX - startX;
            element.css({
              top: y + 'px',
              left:  x + 'px'
            });
          }

          function mouseup() {
            $document.unbind('mousemove', mousemove);
            $document.unbind('mouseup', mouseup);
          }
        }
      });
  </file>
  <file name="index.html">
    <span draggable>Drag ME</span>
  </file>
</example>


Наличие атрибута `draggable` у любого элемента наделяет его новым поведением. Красота этого подхода состоит в том, что мы научили браузер новому трюку. Расширили «словарный запас» браузера, сделав это понятным способом для каждого, кто знаком с HTML.


# Понимание представления (View)

Существует множество JavaScript-шаблонизаторов. Большинство из них получает на вход статичную строку-шаблон и совмещают её с данными, получая новую строку. Эта строка затем вставляется в нужный элемент с помощью innerHTML.

<img src="img/One_Way_Data_Binding.png">

Это означает, что любое изменение данных требует повторного вычисления шаблона и его вставки с помощью innerHTML в DOM. Недостатками данного подхода являются: проблемы при вводе данных пользователем из-за постоянной перезаписи вводимых данных, сложность поддержания данных в актуальном состоянии, сложность процесса обновления DOM, малая выразительность.

Angular использует другой подход. Компилятор Angular использует DOM с директивами, а не просто строковые шаблоны. Результатом является связующая функция, которая будучи скомбинированной с областью видимости модели дает результат для динамического представления. Связывание представления и области видимости модели происходит абсолютно прозрачно. Никаких действий для обновления представления от разработчика не требуется. И, поскольку не используется никаких манипуляций с innerHTML, нет причин для возникновения проблем с вводом данных пользователем. Кроме того, директивы Angular могут содержать не только привязку текста, но и конструкции, определяющие поведение.

<img src="img/Two_Way_Data_Binding.png">

Angular.js позволяет получить стабильный DOM. Это означает, что DOM элемент, привязанный к определённой части модели не меняется на протяжении всего срока привязки.  Это означает, что код может заполучить элементы и регистрировать обработчики событий, и знать, что ссылки не будут уничтожены процессом слияния данных шаблона.
