@ngdoc overview
@name Cookbook: Deep Linking
@description

Deep linking allows you to encode the state of the application in the URL so that it can be
bookmarked and the application can be restored from the URL to the same state.

While Angular does not force you to deal with bookmarks in any particular way, it has services
which make the common case described here very easy to implement.

# Assumptions

Your application consists of a single HTML page which bootstraps the application. We will refer
to this page as the chrome.
Your application is divided into several screens (or views) which the user can visit. For example,
the home screen, settings screen, details screen, etc. For each of these screens, we would like to
assign a URL so that it can be bookmarked and later restored. Each of these screens will be
associated with a controller which define the screen's behavior. The most common case is that the
screen will be constructed from an HTML snippet, which we will refer to as the partial. Screens can
have multiple partials, but a single partial is the most common construct. This example makes the
partial boundary visible using a blue line.

You can make a routing table which shows which URL maps to which partial view template and which
controller.

# Example

In this example we have a simple app which consist of two screens:

* Welcome: url `welcome` Show the user contact information.
* Settings: url `settings` Show an edit screen for user contact information.

<example module="deepLinking" deps="angular-route.js, angular-sanitize.js">
 <file name="script.js">
   angular.module('deepLinking', ['ngRoute', 'ngSanitize'])
     .config(function($routeProvider) {
        $routeProvider.
          when("/welcome",  {templateUrl:'welcome.html',  controller:WelcomeCntl}).
          when("/settings", {templateUrl:'settings.html', controller:SettingsCntl}).
          otherwise({redirectTo: '/welcome'});
     });

   AppCntl.$inject = ['$scope', '$route']
   function AppCntl($scope, $route) {
    $scope.$route = $route;

    // initialize the model to something useful
    $scope.person = {
     name:'anonymous',
     contacts:[{type:'email', url:'anonymous@example.com'}]
    };
   }

   function WelcomeCntl($scope) {
   }

   function SettingsCntl($scope, $location) {

    $scope.isResetDisabled = function() {
     return angular.equals($scope.form, $scope.person)
    }

    $scope.isSaveDisabled = function () {
     return $scope.myForm.$invalid || angular.equals($scope.form, $scope.person)
    }

    $scope.save = function() {
     angular.copy($scope.form, $scope.person);
     $location.path('/welcome');
    };

    $scope.init = function() {
     $scope.form = angular.copy($scope.person);
    }

    $scope.cancel = function() {
     $scope.init();
     $location.path('/welcome');
    };

    $scope.addContact = function() {
     $scope.form.contacts.push({type:'', url:''})
    }

    $scope.removeContact = function(contact) {
     $scope.form.contacts.splice( $scope.form.contacts.indexOf(contact), 1 );
    }

    $scope.init();
  }
 </file>
 <file name="style.css">
   [ng-view] {
     border: 1px solid blue;
     margin: 0;
     padding:1em;
   }

   .partial-info {
     background-color: blue;
     color: white;
     padding: 3px;
   }
 </file>
 <file name="index.html">
    <div ng-controller="AppCntl">
      <h1>Your App Chrome</h1>
      <nav>[ <a href="#/welcome">Welcome</a> | <a href="#/settings">Settings</a> ]</nav>
      <hr />
      <small class="partial-info" ng-bind="'Partial: '+ ($route.current.loadedTemplateUrl || '(empty)')"></small>
      <div ng-view></div>
      <hr />
      <footer>Your app footer</footer>
    </div>
 </file>
 <file name="settings.html">
   <form name="myForm">
   <label>Name: <input type="text" ng-model="form.name" required></label>

   <div ng-repeat="contact in form.contacts">
     <select ng-model="contact.type">
       <option>url</option>
       <option>email</option>
       <option>phone</option>
     </select>
     <input type="text" ng-model="contact.url" />
     <button title="remove" ng-click="removeContact(contact)">X</button>
   </div>
   <div>
     <button title="add" ng-click="addContact()">+</button>
   </div>

   <button title="save" ng-click="save()" ng-disabled="isSaveDisabled()">Save</button>
   <button title="reset" ng-click="init()" ng-disabled="isResetDisabled()">Reset</button>
   <button title="cancel" ng-click="cancel()">Cancel</button>
   </form>   
 </file>
 <file name="welcome.html">
  <h2>Hello {{person.name}}!</h2>
  <div>
    Your contact information:
    <ul>
      <li ng-repeat="contact in person.contacts">{{contact.type}}:
        <span ng-bind-html="contact.url | linky"></span>
      </li>
    </ul>
  </div>
 </file>
 <file name="scenario.js">
   it('should change the view to welcome.html by default when user visits the root', function() {
     expect(element('.partial-info').html()).toContain('welcome.html');
   });

   it('should change the view to welcome.html when user clicks the Welcome nav link', function() {
     element('a:contains(Welcome)').click();
     expect(element('.partial-info').html()).toContain('welcome.html');
   });

   it('should welcome the user by name', function() {
    element('a:contains(Welcome)').click();
    expect(element('[ng-view] h2').html()).toContain('Hello anonymous!');
   });

   it('should change the view to settings.html when user clicks the Settings nav link', function() {
     element('a:contains(Settings)').click();
     expect(element('small.partial-info').html()).toContain('settings.html');
   });

   it('should preserve the original name upon canceling a name change', function() {
     element('a:contains(Welcome)').click();
     expect(element('[ng-view] h2').html()).toContain('Hello anonymous!');
     element('a:contains(Settings)').click();
     input('form.name').enter('notreallymyname');
     element(':button:contains(Cancel)').click();
     expect(element('[ng-view] h2').html()).toContain('Hello anonymous!');
   });

   it('should discard the change when Reset is clicked', function() {
     expect(element('[ng-view] h2').html()).toContain('Hello anonymous!');
     element('a:contains(Settings)').click();
     input('form.name').enter('notreallymyname');
     element(':button:contains(Cancel)').click();     
     expect(element('[ng-view] h2').html()).toContain('Hello anonymous!');
   });


   it('should save an updated name', function() {
     element('a:contains(Settings)').click();
     input('form.name').enter('yourname');
     element(':button:contains(Save)').click();
     expect(element('[ng-view] h2').html()).toContain('Hello yourname!');
   });
 </file>
</example>



# Things to notice

* Routes are defined in the `AppCntl` class. The initialization of the controller causes the
  initialization of the {@link api/ngRoute.$route $route} service with the proper URL
  routes.
* The {@link api/ngRoute.$route $route} service then watches the URL and instantiates the
  appropriate controller when the URL changes.
* The {@link api/ngRoute.directive:ngView ngView} widget loads the view when the URL 
  changes. It also sets the view scope to the newly instantiated controller.
* Changing the URL is sufficient to change the controller and view. It makes no difference whether
  the URL is changed programmatically or by the user.
